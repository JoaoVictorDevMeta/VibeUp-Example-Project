generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  username   String   @unique
  email      String   @unique
  password   String
  profilePic String   @default("")
  bio        String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  following Follow[] @relation("Following")
  followers Follow[] @relation("Followers")
  posts     Post[]
  replies   Reply[]
  liked     Like[]
}

model Follow {
  followerId  Int
  followingId Int
  follower    User @relation("Followers", fields: [followerId], references: [id])
  following   User @relation("Following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Like {
  id      Int    @id @default(autoincrement())
  userId  Int
  postId  Int?
  replyId Int?
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply   Reply? @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, replyId])
}

model Post {
  id    Int    @id @default(autoincrement())
  authorId Int
  text  String
  img   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  likes Like[]
  PostedBy User @relation(fields: [authorId], references: [id])
  replies  Reply[]
}

model Reply {
  id      Int    @id @default(autoincrement())
  postId  Int
  authorId Int
  text    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes    Like[]
  PostedBy User @relation(fields: [authorId], references: [id])
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
